application:
    name: deepread
    version: 1.0-SNAPSHOT
# Server settings (ServerProperties, validate only if running in Application)
server:
    port: 8080
    address: 127.0.0.1
#    spring.jpa.hibernate.ddl-auto=update
#    spring.datasource.url=jdbc:mysql://localhost:3306/deepread
#    spring.datasource.username=root
#    spring.datasource.password=root
spring:
    jpa:
      hibernate:
        ddl-auto: update
    datasource:
        url: jdbc:mysql://localhost:3306/deepread
        username: root
        password: root
    data:
        mongodb:
            uri: mongodb://localhost:27017/test
    mvc:
#        view:
#            prefix: /jsp/
#            suffix: .jsp
    freemarker:
        template-loader-path: /WEB-INF/view
        cache: false #正式部署到生产环境时改为true
        request-context-attribute: request
        suffix: .html


#spring
#spring:
#    profiles: production
#    datasource:
#        platform: mysql
#        #invoking the schema-''platform'.sql and data-"platfrom".sql in classpath to initialize the database when initialize=true
#        initialize: true
#        sqlScriptEncoding: UTF-8
#        name: dataSource
#        # 使用druid数据源
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.jdbc.Driver
#        url: jdbc:mysql://localhost:3306/deepread?characterSetResults=UTF8&amp;characterEncoding=UTF8&amp;zeroDateTimeBehavior=convertToNull
#        username: root
#        password: root
#        filters: stat
#        maxActive: 200
#        initialSize: 20
#        maxWait: 60000
#        minIdle: 3
#        timeBetweenEvictionRunsMillis: 60000
#        minEvictableIdleTimeMillis: 300000
#        validationQuery: select 'x'
#        testWhileIdle: true
#        testOnBorrow: false
#        testOnReturn: false
#        poolPreparedStatements: true
#        maxOpenPreparedStatements: 20
#        jpa:
#            database: MYSQL
#            hibernate:
#                #validate: The "validate" option will check if your mapping is consistent with your database. If not, it throws an error.
#                #update: update the schema.The "update" option will check if your mapping is consistent with your database. If not, it will update your database to make it consistent to your mapping.
#                #create: creates the schema, destroying previous data.
#                #create-drop: drop the schema at the end of the session.
#                #initialize database by @Entity anotation in domain object when ddl-auto's value is update or create or create-drop
#                ddl-auo: none
#                naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
#            showSql: true
#    mvc:
#        view:
#            prefix: /view/
#            suffix: .ftl
#    freemarker:
#        cache: false #正式部署到生产环境时改为true
#        request-context-attribute: request
#    jackson:
#        serialization:
#            INDENT_OUTPUT: true
#mybatis
#mybatis-plus:
#  mapper-locations: classpath:/mapper/*.xml
#  typeAliasesPackage: com.baomidou.springboot.entity
#  global-config:
#    id-type: 2
#    field-strategy: 2
#    auto-set-db-type: true
#    db-column-underline: true
#    refresh-mapper: true
#  configuration:
#    map-underscore-to-camel-case: true
#    cache-enabled: false

#logging
logging:
  level: debug

#spring:
#    profiles:
#        active: production